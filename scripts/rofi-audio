#!/usr/bin/env bash

# Simplified Rofi PipeWire Audio Output Selector

# Function to get available sinks
get_sinks() {
    pactl -f json list sinks | jq -r '.[] | [.name, .description] | join("|")'
}

# Function to change audio sink
change_sink() {
    local sink_name="$1"
    pactl set-default-sink "$sink_name" || return 1
    pactl list short sink-inputs | awk '{print $1}' | xargs -r -I{} pactl move-sink-input {} "$sink_name"
}

# Function to clean and shorten description
clean_desc() {
    echo "$1" | sed -E 's/^[^a-zA-Z0-9]*//; s/^[ \t]*//; s/[ \t]*$//' | cut -d' ' -f1-3
}

main() {
    ! command -v pactl >/dev/null || ! command -v jq >/dev/null || ! command -v rofi >/dev/null && \
        { echo "ERROR: Missing required tools" >&2; exit 1; }

    current_sink=$(pactl get-default-sink 2>/dev/null)
    declare -A sink_map
    choices=()

    while IFS='|' read -r name description; do
        short_desc=$(clean_desc "$description")
        sink_map["$short_desc"]=$name
        prefix=$([ "$name" = "$current_sink" ] && echo "✓" || echo " ")
        choices+=("$prefix $short_desc")
    done < <(get_sinks)

    chosen=$(printf '%s\n' "${choices[@]}" | rofi -dmenu -i -p "" \
        -theme-str '
            window {
                width: 20%;
                height: 20%;
            }
        ')

    [ -z "$chosen" ] && exit 0

    sink_name="${sink_map[$(clean_desc "$chosen")]}"
    [ -z "$sink_name" ] && { echo "ERROR: Invalid selection" >&2; exit 1; }

    if change_sink "$sink_name"; then
        notify-send "Audio Changed" "Now using $(clean_desc "$chosen")" -t 2000 2>/dev/null
    else
        echo "ERROR: Failed to change audio" >&2
        exit 1
    fi
}

main "$@"
